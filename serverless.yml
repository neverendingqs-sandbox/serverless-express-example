service: pco-schedule-swapper

provider:
  name: aws
  runtime: nodejs4.3
  stage: dev

plugins:
  - serverless-plugin-include-dependencies

custom:
  ENV: ${file(config.js):env}
  sessionsTableName: ${self:service}-${opt:stage, self:provider.stage}-sessionsTable
  sessionsTablePolicyName: ${self:service}-${opt:stage, self:provider.stage}-sessionsTablePolicy

resources:
  Resources:
    SessionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.sessionsTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    SessionsTableIamPolicy:
      Type: AWS::IAM::Policy
      DependsOn: SessionsTable
      Properties:
        PolicyName: ${self:custom.sessionsTablePolicyName}
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:*
              Resource: arn:aws:dynamodb:*:*:table/${self:custom.sessionsTableName}
        Roles:
          - Ref: IamRoleLambdaExecution
    MainLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: "30"

functions:
  main:
    handler: src/server.handler
    timeout: 30
    environment:
      SESSION_SECRET: ${self:custom.ENV.SESSION_SECRET}
      SESSIONS_TABLE: ${self:custom.sessionsTableName}
      PCO_CLIENT_ID: ${self:custom.ENV.PCO_CLIENT_ID}
      PCO_CLIENT_SECRET: ${self:custom.ENV.PCO_CLIENT_SECRET}
    events:
      - http:
          path: /
          method: ANY
      - http:
          path: /{any+}
          method: ANY
